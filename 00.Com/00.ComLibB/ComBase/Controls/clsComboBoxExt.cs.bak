using ComBase.Mvc;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Linq;
namespace ComBase.Controls
{
    public static class clsComboBoxExt
    {
        /// <summary>
        /// 아이템 선택
        /// </summary>
        /// <param name="comboBox"></param>
        /// <param name="data">Value 값</param>
        public static void SetValue(this ComboBox comboBox, object data)
        {
            if(data == null)
            {
                comboBox.SelectedIndex = -1;
                return;
            }

            if (comboBox.Tag is ComboBoxOption)
            {
                ComboBoxOption option = (comboBox.Tag as ComboBoxOption);
                if (option.Items != null)
                {
                    for (int i = 0; i < option.Items.Length; i++)
                    {
                        var item = option.Items[i];

                        if (data != null)
                        {
                            if (data.Equals(item.GetPropertieValue(option.ValueMember)))
                            {
                                comboBox.SelectedIndex = i;
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                for (int i=0; i<comboBox.Items.Count; i++)
                {
                    string item = comboBox.Items[i].ToString();
                    string[] values = item.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries);

                    if(values == null || values.Length < 1)
                    {
                        continue;
                    }
                    if(values[0].Trim().Equals(data))
                    {
                        comboBox.SelectedIndex = i;
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// 선택 값
        /// </summary>
        /// <param name="comboBox"></param>
        /// <returns>String</returns>
        public static string GetValue(this ComboBox comboBox)
        {
            if (comboBox.SelectedIndex < 0)
            {
                return string.Empty;
            }

            if (comboBox.Tag is ComboBoxOption)
            {

                ComboBoxOption option = (comboBox.Tag as ComboBoxOption);
                return option.Items[comboBox.SelectedIndex].GetPropertieValue(option.ValueMember).ToString();
                
            }
            else
            {
                string item = comboBox.Items[comboBox.SelectedIndex].ToString();
                string[] values = item.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries);

                return values[0];
            }

            //return comboBox.Items[comboBox.SelectedIndex].ToString();
        }

        /// <summary>
        /// 선택 아이템 Class
        /// </summary>
        /// <param name="comboBox"></param>
        /// <returns>Class</returns>
        public static object GetSelectedItem(this ComboBox comboBox)
        {
            if (comboBox.SelectedIndex < 0)
            {
                return null;
            }

            if (comboBox.Tag is ComboBoxOption)
            {
                ComboBoxOption option = (comboBox.Tag as ComboBoxOption);
                return option.Items[comboBox.SelectedIndex];
            }

            return comboBox.SelectedItem;
        }

        /// <summary>
        /// 초기화
        /// </summary>
        /// <param name="comboBox"></param>
        public static void Initialize(this ComboBox comboBox)
        {
            comboBox.SelectedIndex = -1;
        }

        /// <summary>
        /// 콤보박스 매핑
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="comboBox"></param>
        /// <param name="items"></param>
        /// <param name="displayMember"></param>
        /// <param name="valueMember"></param>
        /// <param name="addDisplayMember"></param>
        /// <param name="addValueMember"></param>
        /// <param name="addComboBoxPosition"></param>
        public static void SetItems<T>(this ComboBox comboBox, List<T> list, string displayMember, string valueMember, string addDisplayMember = "", string addValueMember = "", AddComboBoxPosition addComboBoxPosition = AddComboBoxPosition.None, bool IsDisplayValue = true) where T : BaseDto, new()
        {
            if (list == null || list.Count < 1)
            {
                return;
            }
            List<T> items = new List<T>();
            items = list.ToList();
            comboBox.AutoCompleteSource = AutoCompleteSource.ListItems;
            comboBox.AutoCompleteMode = AutoCompleteMode.SuggestAppend;

            foreach (var item in items)
            {
                object display = item.GetPropertieValue(displayMember);
                object value = item.GetPropertieValue(valueMember);

                if (IsDisplayValue == true)
                {
                    comboBox.Items.Add(string.Concat(value.ToString().Trim(), ".", display.ToString().Trim()));
                }
                else
                {
                    comboBox.Items.Add(display.ToString().Trim());
                }
            }

            if (addComboBoxPosition == AddComboBoxPosition.Bottom)
            {
                if (addValueMember.IsNullOrEmpty() || addDisplayMember.IsNullOrEmpty())
                {
                    comboBox.Items.Add(string.Concat(addValueMember, addDisplayMember));
                }
                else if (!addValueMember.IsNullOrEmpty() && !addDisplayMember.IsNullOrEmpty())
                {                    
                    if (IsDisplayValue == true)
                    {
                        comboBox.Items.Add(string.Concat(addValueMember, ".", addDisplayMember));
                    }
                    else
                    {
                        comboBox.Items.Add(string.Concat(addDisplayMember));
                    }
                }

                T t = new T();
                t.SetPropertieValue(valueMember, addValueMember);
                t.SetPropertieValue(displayMember, addDisplayMember);
                items.Add(t);

            }

            if (addComboBoxPosition == AddComboBoxPosition.Top)
            {
                if (addValueMember.IsNullOrEmpty() || addDisplayMember.IsNullOrEmpty())
                {
                    comboBox.Items.Insert(0, string.Concat(addValueMember, addDisplayMember));
                }
                else if (!addValueMember.IsNullOrEmpty() && !addDisplayMember.IsNullOrEmpty())
                {                    
                    if (IsDisplayValue == true)
                    {
                        comboBox.Items.Insert(0, string.Concat(addValueMember, ".", addDisplayMember));
                    }
                    else
                    {
                        comboBox.Items.Insert(0, string.Concat(addDisplayMember));
                    }
                }

                T t = new T();
                t.SetPropertieValue(valueMember, addValueMember);
                t.SetPropertieValue(displayMember, addDisplayMember);
                //items.Add(t);

                 items.Insert(0, t);
            }

            string dataField = string.Empty;
            ComboBoxOption option = new ComboBoxOption();
            if (comboBox.Tag is string)
            {
                dataField = comboBox.Tag.ToString();
            }
            else if (comboBox.Tag is ComboBoxOption)
            {
                option = (comboBox.Tag as ComboBoxOption);
                dataField = option.DataField;
            }

            option.Items = items.ToArray();
            option.DataField = dataField;
            option.ValueMember = valueMember;
            option.DisplayMember = displayMember;
            option.AddValueMember = addValueMember;
            option.AddDisplayMember = addDisplayMember;
            option.ItemPosition = addComboBoxPosition;

            comboBox.Tag = option;
        }

        public static void SetItems<T>(this ComboBox comboBox, List<T> list, string displayMember, string valueMember, bool IsShowValue, bool IsShowDisplay = true) where T : BaseDto, new()
        {
            if (list == null || list.Count < 1)
            {
                return;
            }
            List<T> items = new List<T>();
            items = list.ToList();
            comboBox.AutoCompleteSource = AutoCompleteSource.ListItems;
            comboBox.AutoCompleteMode = AutoCompleteMode.SuggestAppend;

            foreach (var item in items)
            {
                object display = item.GetPropertieValue(displayMember);
                object value = item.GetPropertieValue(valueMember);

                if (IsShowValue == true && IsShowDisplay == true)
                {
                    comboBox.Items.Add(string.Concat(value.ToString().Trim(), ".", display.ToString().Trim()));
                }
                else if (IsShowValue == false && IsShowDisplay == true)
                {
                    comboBox.Items.Add(display.ToString().Trim());
                }
                else if (IsShowValue == true && IsShowDisplay == false)
                {
                    comboBox.Items.Add(value.ToString().Trim());
                }
                else
                {
                    comboBox.Items.Add(string.Concat(value.ToString().Trim(), ".", display.ToString().Trim()));
                }
            }

            string dataField = string.Empty;
            ComboBoxOption option = new ComboBoxOption();
            if (comboBox.Tag is string)
            {
                dataField = comboBox.Tag.ToString();
            }
            else if (comboBox.Tag is ComboBoxOption)
            {
                option = (comboBox.Tag as ComboBoxOption);
                dataField = option.DataField;
            }

            option.Items = items.ToArray();
            option.DataField = dataField;
            option.ValueMember = valueMember;
            option.DisplayMember = displayMember;
            
            comboBox.Tag = option;
        }

        public static void SetDIsplayItems<T>(this ComboBox comboBox, List<T> list, string displayMember, string valueMember, string addDisplayMember = "", string addValueMember = "", AddComboBoxPosition addComboBoxPosition = AddComboBoxPosition.None) where T : BaseDto, new()
        {
            if (list == null || list.Count < 1)
            {
                return;
            }
            List<T> items = new List<T>();
            items = list.ToList();
            comboBox.AutoCompleteSource = AutoCompleteSource.ListItems;
            comboBox.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
            
            foreach (var item in items)
            {
                object display = item.GetPropertieValue(displayMember);
                object value = item.GetPropertieValue(valueMember);

                comboBox.Items.Add(string.Concat(display.ToString().Trim()));
            }

            if (addComboBoxPosition == AddComboBoxPosition.Bottom)
            {
                if (addValueMember.IsNullOrEmpty() || addDisplayMember.IsNullOrEmpty())
                {
                    comboBox.Items.Add(string.Concat(addValueMember, addDisplayMember));
                }
                else if (!addValueMember.IsNullOrEmpty() && !addDisplayMember.IsNullOrEmpty())
                {
                    comboBox.Items.Add(string.Concat(addDisplayMember));
                }

                T t = new T();
                t.SetPropertieValue(valueMember, addValueMember);
                t.SetPropertieValue(displayMember, addDisplayMember);
                items.Add(t);

            }

            if (addComboBoxPosition == AddComboBoxPosition.Top)
            {
                if (addValueMember.IsNullOrEmpty() || addDisplayMember.IsNullOrEmpty())
                {
                    comboBox.Items.Insert(0, string.Concat(addValueMember, addDisplayMember));
                }
                else if (!addValueMember.IsNullOrEmpty() && !addDisplayMember.IsNullOrEmpty())
                {
                    comboBox.Items.Insert(0, string.Concat(addDisplayMember));
                }

                T t = new T();
                t.SetPropertieValue(valueMember, addValueMember);
                t.SetPropertieValue(displayMember, addDisplayMember);
                //items.Add(t);

                items.Insert(0, t);
            }

            string dataField = string.Empty;
            ComboBoxOption option = new ComboBoxOption();
            if (comboBox.Tag is string)
            {
                dataField = comboBox.Tag.ToString();
            }
            else if (comboBox.Tag is ComboBoxOption)
            {
                option = (comboBox.Tag as ComboBoxOption);
                dataField = option.DataField;
            }

            option.Items = items.ToArray();
            option.DataField = dataField;
            option.ValueMember = valueMember;
            option.DisplayMember = displayMember;
            option.AddValueMember = addValueMember;
            option.AddDisplayMember = addDisplayMember;
            option.ItemPosition = addComboBoxPosition;

            comboBox.Tag = option;
        }
        public static void SetOptions(this ComboBox comboBox, ComboBoxOption option)
        {
            string dataField = string.Empty;
            if (comboBox.Tag != null)
            {
                if (comboBox.Tag is string)
                {
                    dataField = comboBox.Tag.ToString();
                }
            }

            if (!string.IsNullOrWhiteSpace(dataField))
            {
                option.DataField = dataField;
            }

            comboBox.Tag = option;
        }
       
        public static string GetDataField(this ComboBox comboBox)
        {
            if(comboBox.Tag is ComboBoxOption)
            {
                return (comboBox.Tag as ComboBoxOption).DataField;
            }
            if(comboBox.Tag is string)
            {
                return comboBox.Tag.ToString();
            }
            return string.Empty;
        }

        public static ComboBoxOption GetOption(this ComboBox comboBox)
        {
            if (comboBox.Tag is ComboBoxOption)
            {
                return comboBox.Tag as ComboBoxOption;
            }

            return null;
        }
             public static void Clear(this ComboBox comboBox)
        {
            comboBox.Items.Clear();
        }
    }

    public class ComboBoxOption : IControlOption
    {
        public object[] Items;
        public string DataField { get; set; }
        public string DisplayMember;
        public string ValueMember;
        public string AddDisplayMember;
        public string AddValueMember;
        public AddComboBoxPosition ItemPosition;


    }
   
    public enum AddComboBoxPosition
    {
        None,
        Top,
        Bottom
    }
}
